From c45b6c08adcba24a87836dd357541991a1a2c1c5 Mon Sep 17 00:00:00 2001
From: Siddharth Pilkhn <sidpel03@gmail.com>
Date: Sun, 16 Jun 2024 22:51:19 +0530
Subject: [PATCH] first commit

---
 .idea/misc.xml         |  3 +++
 src/DataManipulator.ts | 30 +++++++++++++++++++---------
 src/Graph.tsx          | 45 +++++++++++++++++++++++-------------------
 3 files changed, 49 insertions(+), 29 deletions(-)

diff --git a/.idea/misc.xml b/.idea/misc.xml
index dc9ea49..9de2865 100644
--- a/.idea/misc.xml
+++ b/.idea/misc.xml
@@ -1,4 +1,7 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
+  <component name="Black">
+    <option name="sdkName" value="Python 3.10" />
+  </component>
   <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.10" project-jdk-type="Python SDK" />
 </project>
\ No newline at end of file
diff --git a/src/DataManipulator.ts b/src/DataManipulator.ts
index 7f62295..156c7b1 100644
--- a/src/DataManipulator.ts
+++ b/src/DataManipulator.ts
@@ -1,20 +1,32 @@
 import { ServerRespond } from './DataStreamer';
 
 export interface Row {
-  stock: string,
-  top_ask_price: number,
-  timestamp: Date,
+    price_abc: number,
+    price_def: number,
+    ratio: number,
+    timestamp: Date,
+    upper_bound: number,
+    lower_bound: number,
+    trigger_alert: number | undefined,
 }
 
 
 export class DataManipulator {
-  static generateRow(serverResponds: ServerRespond[]) {
-    return serverResponds.map((el: any) => {
+  static generateRow(serverRespond: ServerRespond[]): Row {
+      const priceABC = (serverRespond[0].top_ask.price + serverRespond[0].top_bid.price) / 2;
+      const priceDEF = (serverRespond[1].top_ask.price + serverRespond[1].top_bid.price) / 2;
+      const ratio = priceABC / priceDEF;
+      const upperBound = 1 + 0.05;
+      const lowerBound = 1 - 0.05;
       return {
-        stock: el.stock,
-        top_ask_price: el.top_ask && el.top_ask.price || 0,
-        timestamp: el.timestamp,
+          price_abc: priceABC,
+          price_def: priceDEF,
+          ratio,
+          timestamp: serverRespond[0].timestamp > serverRespond[1].timestamp ?
+              serverRespond[0].timestamp : serverRespond[1].timestamp,
+          upper_bound: upperBound,
+          lower_bound: lowerBound,
+          trigger_alert: (ratio > upperBound || ratio < lowerBound) ? ratio : undefined,
       };
-    })
   }
 }
diff --git a/src/Graph.tsx b/src/Graph.tsx
index 277797d..a32c1d5 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -1,7 +1,7 @@
-import React, { Component } from 'react';
-import { Table } from '@finos/perspective';
-import { ServerRespond } from './DataStreamer';
-import { DataManipulator } from './DataManipulator';
+import React, {Component} from 'react';
+import {Table, TableData} from '@finos/perspective';
+import {ServerRespond} from './DataStreamer';
+import {DataManipulator} from './DataManipulator';
 import './Graph.css';
 
 interface IProps {
@@ -23,10 +23,13 @@ class Graph extends Component<IProps, {}> {
     const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
 
     const schema = {
-      stock: 'string',
-      top_ask_price: 'float',
-      top_bid_price: 'float',
+      price_abc: 'float',
+      price_def: 'float',
+      ratio: 'float',
       timestamp: 'date',
+      upper_bound: 'float',
+      lower_bound: 'float',
+      trigger_alert: 'float'
     };
 
     if (window.perspective && window.perspective.worker()) {
@@ -34,25 +37,27 @@ class Graph extends Component<IProps, {}> {
     }
     if (this.table) {
       // Load the `table` in the `<perspective-viewer>` DOM reference.
-      elem.load(this.table);
-      elem.setAttribute('view', 'y_line');
-      elem.setAttribute('column-pivots', '["stock"]');
-      elem.setAttribute('row-pivots', '["timestamp"]');
-      elem.setAttribute('columns', '["top_ask_price"]');
-      elem.setAttribute('aggregates', JSON.stringify({
-        stock: 'distinctcount',
-        top_ask_price: 'avg',
-        top_bid_price: 'avg',
-        timestamp: 'distinct count',
+       elem.load(this.table);
+            elem.setAttribute('view', 'y_line');
+            elem.setAttribute('row-pivots', '["timestamp"]');
+            elem.setAttribute('columns', '["ratio", "lower_bound", "upper_bound", "trigger_alert"]');
+            elem.setAttribute('aggregates', JSON.stringify({
+            price_abc: 'avg',
+            price_def: 'avg',
+            ratio: 'avg',
+            timestamp: 'distinct count',
+            upper_bound: 'avg',
+            lower_bound: 'avg',
+            trigger_alert: 'avg'
       }));
     }
   }
 
   componentDidUpdate() {
     if (this.table) {
-      this.table.update(
-        DataManipulator.generateRow(this.props.data),
-      );
+        this.table.update([
+            DataManipulator.generateRow(this.props.data),
+        ] as unknown as TableData);
     }
   }
 }
-- 
2.45.2.windows.1

